# Closest I could get to these numbers was:
# MD <- glm(data=comp,MissedDose~ZEduc+ZIncom45+Age+ZAlcTox+ZCESDFU+ZAUDIT,family=binomial(link=logit))
# MD <- glm(data=comp,MissedDose~DrinkYN+ZAlcTox+Day,family=binomial(link=logit))
MD <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox + (1|PID), data = comp, family=binomial(link=logit))
# Use a predict function instead of coding in the values
int <- MD@beta[1]
b1 <- MD@beta[2] # DrinkYN1
b2 <- MD@beta[3] # Day
b3 <- MD@beta[4] # ZAlcTox
b4 <- MD@beta[5] # DrinkYN1:Day
sigmaPID <- MD@theta
X$groupErr <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$groupErr2 <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$MissedDose <- predict(MD,X,allow.new.levels=TRUE)
X$MissedDose <- 1/(1+exp(-X$MissedDose))
X$MissedDose <- rbinom(2700, 1, prob=X$MissedDose)
sim.data[[i]] <- X
}
l1 <- sim.data[[1]]
l1
rremove <- function(nrem, x) {
id <- sample(length(x), nrem)
x[id] <- NA
x
}
grps <- list(X='Q1',A=c('Q2','Q3'),B=c('Q4','Q5'),C=c('Q6','Q7'))
split.form <- function(set,grps) {
grp <- sample(toupper(letters[1:3]),1)
out <- apply(set,1,function(x){
if (grp=="A"){
x[grps$A] <- NA
}
else if (grp == "B")
{
x[grps$B] <- NA
}
else {
x[grps$C] <- NA
}
})
out
}
s <- split.form(X,grps)
s
grp <- sample(toupper(letters[1:3]),1)
grp
out <- apply(l1,1,function(x){
if (grp=="A"){
x[grps$A] <- NA
}
else if (grp == "B")
{
x[grps$B] <- NA
}
else {
x[grps$C] <- NA
}
})
out
l1
l1[grps$A]
l1[grps$A]<-NA
l1
l1 <- sim.data[[1]]
out <- apply(l1,1,function(x){
if (grp=="A"){
x[grps$A] <- NA
x
}
else if (grp == "B")
{
x[grps$B] <- NA
x
}
else {
x[grps$C] <- NA
x
}
})
out
l1
grp
l1[grps$A]<-NA
l1
l1 <- sim.data[[1]]
l1$block <- sample(grps,nrow(l1))
l1$block <- sample(grps,nrow(l1),FALSE)
l1$block[sample(1:nrow(l1),nrow(l1),FALSE)] <- grps
l1
l1 <- sim.data[[1]]
l1$block[sample(1:nrow(l1),nrow(l1),FALSE)] <- c('A','B','C')
l1
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
if (set$block == "A"){
set[grps$A] <- NA
}
else if (set$block == "B"){
set[grps$B] <- NA
}
else {
set[grps$C] <- NA
}
set
}
l1 <- sim.data[[1]]
split.form(l1,grps)
split.form(l1,grps)
l1 <- sim.data[[1]]
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
out <- apply(set,1,function(x){
if (x$block == "A"){
x[grps$A] <- NA
}
else if (x$block == "B"){
x[grps$B] <- NA
}
else {
x[grps$C] <- NA
}
})
out
}
split.form(l1,grps)
dim(l1)
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
out <- apply(set,1,function(x){
if (x[20] == "A"){
x[grps$A] <- NA
}
else if (x[20]== "B"){
x[grps$B] <- NA
}
else {
x[grps$C] <- NA
}
})
out
}
l1 <- sim.data[[1]]
split.form(l1,grps)
l1 <- sim.data[[1]]
set <- l1
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
set[set$block == "A",set[grps$A]] <- NA
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
set[set$block == "A",set[grps$A]] <- NA
set[set$block == "A",set[[grps$A]]] <- NA
set[set$block == "A",grps$A] <- NA
set
set[set$block == "A",grps$A] <- NA
set[set$block == "B",grps$B] <- NA
set[set$block == "C",grps$C] <- NA
set
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
set[set$block == "A",grps$A] <- NA
set[set$block == "B",grps$B] <- NA
set[set$block == "C",grps$C] <- NA
set
}
split.form(l1,grps)
l1 <- sim.data[[1]]
rremove <- function(nrem, x) {
id <- sample(length(x), nrem)
x[id] <- NA
x
}
rremove(l1,5)
rremove(5,l1)
wave.des <- function(set, nmiss, ...) {
id <- replicate(60, sample(2:44, size=nmiss))
for (i in 1:60) {
set[set$PID==i & set$Day %in% id[,i], c('Q1','Q2','Q3','Q4','Q5','Q6','Q7')] <- NA
}
set
}
imp1 <- list()
set.seed(917236)
for(j in c(2,4,6)) { # 2, 4, 6? Why?
new.data <-lapply(sim.data, function(x) {split.form(x, n=j, bound=0)})
imp1[[j/2]] <- lapply(new.data, function(x) {mice(x, m=5)})
}
imp1 <- list()
set.seed(917236)
for(j in c(2,4,6)) { # 2, 4, 6? Why?
new.data <-lapply(sim.data, function(x) {split.form(x, grps)})
imp1[[j/2]] <- lapply(new.data, function(x) {mice(x, m=5)})
}
set.seed(1234)
sim.data <- list()
for (i in 1:5) {
X <- as.data.frame(rmvnorm(60, mean=rep(0,6), sigma=corrmat))
names(X) <- c('ZEduc', 'ZIncom45', 'Age', 'ZAlcTox', 'ZCESDFU', 'ZAUDIT')
X$PID <- 1:60
X$Gender <- as.factor(rbinom(60, 1, prob=0.5))
X <- X[rep(row.names(X), 45),] #Repeat each row 45 times, all current variables are time invariant (ZAlcTox, too??)
X <- X[order(X$PID),] #Order by PID
X$Day <- rep(0:44, 60) #Create a variable containing day variable 0-44
# Create Variables
X$DrinkYN <- 1/(1+exp(-1*predict(fit1, newdata = X)))
X$DrinkYN <- as.factor(rbinom(2700, 1, prob = X$DrinkYN))
X$Q1 <- 1/(1+exp(-1*predict(fit2, newdata=X)))
X$Q1 <- as.factor(rbinom(2700, 1, prob = X$Q1))
X$Q2 <- 1/(1+exp(-1*predict(fit3, newdata = X)))
X$Q2 <- as.factor(rbinom(2700,1,prob=X$Q2))
X$Q3 <- 1/(1+exp(-1*predict(fit4, newdata = X)))
X$Q3 <- as.factor(rbinom(2700,1,prob=X$Q3))
X$Q4 <- 1/(1+exp(-1*predict(fit5, newdata = X)))
X$Q4 <- as.factor(rbinom(2700,1,prob=X$Q4))
X$Q5 <- 1/(1+exp(-1*predict(fit6, newdata = X)))
X$Q5 <- as.factor(rbinom(2700,1,prob=X$Q5))
X$Q6 <- 1/(1+exp(-1*predict(fit7, newdata = X)))
X$Q6 <- as.factor(rbinom(2700,1,prob=X$Q6))
X$Q7 <- rpois(2700, 2) # lambda = 2...mean of 2. why???
X[X$DrinkYN==0,c('Q7')] <- 0
# Make Missed Dose
# This is where issues come in!!!
# Closest I could get to these numbers was:
# MD <- glm(data=comp,MissedDose~ZEduc+ZIncom45+Age+ZAlcTox+ZCESDFU+ZAUDIT,family=binomial(link=logit))
# MD <- glm(data=comp,MissedDose~DrinkYN+ZAlcTox+Day,family=binomial(link=logit))
MD <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox + (1|PID), data = comp, family=binomial(link=logit))
# Use a predict function instead of coding in the values
int <- MD@beta[1]
b1 <- MD@beta[2] # DrinkYN1
b2 <- MD@beta[3] # Day
b3 <- MD@beta[4] # ZAlcTox
b4 <- MD@beta[5] # DrinkYN1:Day
sigmaPID <- MD@theta
X$groupErr <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$groupErr2 <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$MissedDose <- predict(MD,X,allow.new.levels=TRUE)
X$MissedDose <- 1/(1+exp(-X$MissedDose))
X$MissedDose <- rbinom(2700, 1, prob=X$MissedDose)
sim.data[[i]] <- X
}
#Remove unnecessary before analysis
rm(comp, sigma, X, b1, b2,b3,b4, fit1, fit2, fit3, fit4, fit5, fit6, fit7,
i, int, sigmaPID)
l1 <- sim.data[[1]]
## Create MISSINGNESS
rremove <- function(nrem, x) { # this literally just randomly removes nrem columns. Like, the entire column. Why???
id <- sample(length(x), nrem)
x[id] <- NA
x
}
grps <- list(X='Q1',A=c('Q2','Q3'),B=c('Q4','Q5'),C=c('Q6','Q7'))
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
set[set$block == "A",grps$A] <- NA
set[set$block == "B",grps$B] <- NA
set[set$block == "C",grps$C] <- NA
set
}
wave.des <- function(set, nmiss, ...) {
id <- replicate(60, sample(2:44, size=nmiss))
for (i in 1:60) {
set[set$PID==i & set$Day %in% id[,i], c('Q1','Q2','Q3','Q4','Q5','Q6','Q7')] <- NA
}
set
}
# alt.split <- function(set,n,bound=0){
#   set[sample(set$Day <= bound,n),c('Q1','Q2','Q3','Q4','Q5','Q6','Q7')] <- t(apply(set[sample(set$Day <= bound,n),],split.form))
#   # above won't work, is applying split.form() to different sampled rows??
#   # maybe assign og sampled rows to variable and then apply split.form() to those and then reassign to set?
#
# }
split.imp <- list()
set.seed(917236)
for(j in c(2,4,6)) { # 2, 4, 6? Why?
new.data <-lapply(sim.data, function(x) {split.form(x, grps)})
split.imp[[j/2]] <- lapply(new.data, function(x) {mice(x, m=5)})
}
mice(new.data[1],m=5)
mice(new.data[[1]],m=5)
mm <- mice(new.data[[1]],m=5)
mm
split.imp[[1]]
split.imp[[1]]$Q1
split.imp[[1]]$imp
split.imp[[1]]$imp$Q1
split.imp[[1]][1]$imp$Q1
split.imp[[1]][1]
mm$imp
complete(mm,1)
split.data <- lapply(sim.data,function(x){split.form(x,grps)})
split.data[1]
split.imp <- lapply(split.data, function(x) {mice(x, m=5)})
split.imp[1]
split.pm <- lapply(sim.data,function(x){split.form(x,grps)})
split.imp <- lapply(split.pm, function(x) {mice(x, m=5)})
fit <- with(split.imp, glmer(MissedDose~DrinkYN+ZAlcTox+Day+(1 |PID), family=binomial(link=logit),
control=glmerControl(optimizer='bobyqa', optCtrl = list(maxfun=2000))))
split.data <- lapply(split.imp,function(x) {complete(x,1)})
summary(split.data)
split.data[1]
wave.pm <- lapply(sim.data,function(x){wave.des(x,grps)})
wave.pm <- lapply(sim.data,function(x){wave.des(x,11)})
wave.imp <- lapply(wave.pm, function(x) {mice(x, m=5)})
wave.data <- lapply(wave.imp,function(x) {complete(x,1)})
wave.data[1]
dim(split.data)
length(split.data)
model <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox + (1|PID), data = comp, family=binomial(link=logit))
model <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox + (1|PID), data = split.data[1], family=binomial(link=logit))
sim.data[1]
sim.data[1]$PID
X
split.data[1]
model <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox, data = split.data[1], family=binomial(link=logit))
names(split.data[1])
as.data.frame(split.data[1])
names(as.data.frame(split.data[1]))
split.data <- lapply(split.imp,function(x) {as.data.frame(complete(x,1))})
model <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox, data = split.data[1], family=binomial(link=logit))
split.data
names(split.data[1])
split.data <- lapply(split.imp,function(x) {
c <- complete(x,1)}
df <- as.data.frame(c)
df)
split.data <- lapply(split.imp,function(x) {
c <- complete(x,1)}
df <- as.data.frame(c)
df
})
c <- complete(x,1)
split.data <- lapply(split.imp,function(x) {complete(x,1)})
split.data <- lapply(split.data,function(x){as.data.frame(x)})
names(split.data[1])
dat <- as.data.frame(split.data[1])
model <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox, data = split.data[1], family=binomial(link=logit))
names(dat)
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = split.data[1], family=binomial(link=logit))
names(dat)
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
model$coefficients
typeof(model$coefficients)
set.seed(12345)
splitmods <- list()
for (i in 1:length(split.data)){
dat <- as.data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients)
}
splitmods[2]
set.seed(12345)
splitmods <- list()
for (i in 1:length(split.data)){
dat <- as.data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- model$coefficients
}
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- as.data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- model$coefficients
}
splitmods[1]
splitmods[2]
length(splitmods)
?as.data.frame
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
splitmods[1]
model$coefficients
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients,col.names=c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,col.names=c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
splitmods[1]$Intercept
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,colnames<-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
splitmods[1]$Intercept
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,)
colnames<-(splitmods[i],c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients)
colnames<-(splitmods[i],c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
?colnames
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients)
colnames(splitmods[i]) <-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day")
}
splitmods[1]
typeof(splitmods[1])
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
colnames(splitmods[i]) <-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day")
}
typeof(splitmods[1])
coef(model)
typeof(coef(model))
coef(model)$Intercept
coef(model).intercept
coef(model)[1]
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wavemods <- rep(length(wave.data),NA)
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
wavemods <- rep(length(wave.data),NA)
wave.pm <- lapply(sim.data,function(x){wave.des(x,11)})
wave.imp <- lapply(wave.pm, function(x) {mice(x, m=5)})
wave.data <- lapply(wave.imp,function(x) {complete(x,1)})
set.seed(12345)
wavemods <- rep(length(wave.data),NA)
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
splitmods <- rep(length(split.data),NA)
length(split.data)
rep(length(split.data),NA)
typeof(length(split.data))
rep(5,NA)
set.seed(12345)
splitmods <- list()
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wave.mods <- list()
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wavemods <- list()
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
wavemods[1]
wavemods[2]

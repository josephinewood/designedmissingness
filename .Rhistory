splitmods <- list()
for (i in 1:length(split.data)){
dat <- as.data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- model$coefficients
}
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- as.data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- model$coefficients
}
splitmods[1]
splitmods[2]
length(splitmods)
?as.data.frame
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
splitmods[1]
model$coefficients
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients,col.names=c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,col.names=c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
splitmods[1]$Intercept
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,colnames<-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
splitmods[1]
splitmods[1]$Intercept
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients,)
colnames<-(splitmods[i],c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients)
colnames<-(splitmods[i],c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day"))
}
?colnames
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- as.data.frame(model$coefficients)
colnames(splitmods[i]) <-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day")
}
splitmods[1]
typeof(splitmods[1])
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
colnames(splitmods[i]) <-c("Intercept","DrinkYN2","Day","ZAlcTox","DrinkYN2:Day")
}
typeof(splitmods[1])
coef(model)
typeof(coef(model))
coef(model)$Intercept
coef(model).intercept
coef(model)[1]
set.seed(12345)
splitmods <- rep(length(split.data),NA)
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wavemods <- rep(length(wave.data),NA)
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
wavemods <- rep(length(wave.data),NA)
wave.pm <- lapply(sim.data,function(x){wave.des(x,11)})
wave.imp <- lapply(wave.pm, function(x) {mice(x, m=5)})
wave.data <- lapply(wave.imp,function(x) {complete(x,1)})
set.seed(12345)
wavemods <- rep(length(wave.data),NA)
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
splitmods <- rep(length(split.data),NA)
length(split.data)
rep(length(split.data),NA)
typeof(length(split.data))
rep(5,NA)
set.seed(12345)
splitmods <- list()
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wave.mods <- list()
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wavemods <- list()
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
wavemods[1]
wavemods[2]
# Install needed packages, if necessary
# install.packages(c('lme4','mvtnorm','lmerTest'))
# Set working directory
setwd("~/GitHub/designedmissingness/")
# Load necessary libraries
library(mice)
library(lme4)
library(mvtnorm)
library(lmerTest)
# Read in Daily With Tox CSV data file
Daily <- read.csv('~/GitHub/designedmissingness/Daily with Tox.csv')
# Retain desired variables
names(Daily)[1] <- c('PID')
Daily <- Daily[,c('PID', 'Day', 'Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'
,'MissedDose'
, 'ZEduc', 'ZIncom45', 'Gender', 'Age', 'ZAlcTox'
,'ZCESDFU', 'ZAUDIT', 'DrinkYN')]
# Impute missing values in new dataset, 'comp'...Daily has 4.74% missing (sum(is.na(Daily))/prod(dim(Daily)))
comp <- complete(mice(Daily, m=1, seed=817236),1)
# Convert Age to data type 'double'
comp$Age <- as.numeric(comp$Age)
# Shift days back 1 day
comp$Day <- comp$Day-1
# Remove the Daily dataset from the environment
rm(Daily)
#comp$Age <- as.numeric(scale(comp$Age)) # why???
comp$Q1 <- as.factor(comp$Q1)
comp$Q2 <- as.factor(comp$Q2)
comp$Q3 <- as.factor(comp$Q3)
comp$Q4 <- as.factor(comp$Q4)
comp$Q5 <- as.factor(comp$Q5)
comp$Q6 <- as.factor(comp$Q6)
comp$Q7 <- as.integer(comp$Q7)
comp$DrinkYN <- as.factor(comp$DrinkYN)
comp$MissedDose <- as.factor(comp$MissedDose)
comp$Gender <- as.factor(comp$Gender)
# Correlation Matrix
# Use model.matrix to convert factor variables to dummy encoding
# Matches OG matrix!!!
corrmat <- cor(model.matrix(~.-1,data=comp[,c('ZEduc', 'ZIncom45', 'Age', 'ZAlcTox', 'ZCESDFU', 'ZAUDIT')]))
round(corrmat, 2) # display the matrix, rounding values to 2 decimal places
# Fit logistic models to each variable to use as foundation for simulation
# OG author built models that were seemingly random? New models are the target~all others
# Drink_fit <- glm(data=comp, DrinkYN~., family=binomial(link=logit)) # warning: fitted probs numerically 0 or 1 occurred
#
# Q1_fit <- glm(data=comp, Q1~., family=binomial(link=logit))
#
# Q2_fit <- glm(data=comp, Q2~., family=binomial(link=logit))
#
# Q3_fit <- glm(data=comp, Q3~., family=binomial(link=logit))
#
# Q4_fit <- glm(data=comp, Q4~., family=binomial(link=logit))
#
# Q5_fit <- glm(data=comp, Q5~., family=binomial(link=logit))
#
# Q6_fit <- glm(data=comp, Q6~., family=binomial(link=logit))
# OG stopped with Q6...but don't we want to simulate all of the variables? Nvm done with the corrmat
# Q7_fit <- lm(data=comp, Q7~.)
#
# MD_fit <- lm(data=comp, MissedDose~.)
#
# Edu_fit <- lm(data=comp, ZEduc~.)
#
# Inc_fit <- lm(data=comp, ZIncom45~.)
#
# Gender_fit <- lm(data=comp, Gender~.)
#
# Age_fit <- lm(data=comp, Q6~.)
#
# Alc_fit <- lm(data=comp, ZAlcTox~.)
#
# Cesdfu_fit <- lm(data=comp, ZCESDFU~.)
#
# Audit_fit <- lm(data=comp, ZAUDIT~.)
# for (n in names(comp[,-1])){
#   n <- as.name(n)
#   nam <- paste(n, "_fit", sep = "")
#   mod <- glm(data=comp,n~.-1,family=binomial(link=logit))
#   assign(nam, mod)
# }
# OG fit models for the questions using variables simulated via corrmat
fit1 <- glm(data=comp, DrinkYN~ZIncom45+Age+ZAlcTox+ZAUDIT, family=binomial(link=logit))
fit2<- glm(data=comp, Q1~ZEduc+ZIncom45+ZAlcTox+ZCESDFU, family=binomial(link=logit))
fit3<- glm(data=comp, Q2~Q1+ZEduc+ZIncom45+Age+ZAlcTox+ZCESDFU+ZAUDIT+Gender, family=binomial(link=logit))
fit4<- glm(data=comp, Q3~Q1+Q2+ZEduc+ZIncom45+ZAlcTox+ZCESDFU+Gender, family=binomial(link=logit))
fit5<- glm(data=comp, Q4~Q1+Q2+Q3+ZEduc+ZAlcTox+ZCESDFU+ZAUDIT+Gender, family=binomial(link=logit))
fit6<- glm(data=comp, Q5~Q1+Q3+Q4+ZEduc+ZIncom45+ZAlcTox+ZAUDIT, family=binomial(link=logit))
fit7<- glm(data=comp, Q6~Q3+Q5+DrinkYN+ZEduc+ZIncom45+Age+ZAlcTox+ZCESDFU+ZAUDIT, family=binomial(link=logit))
# Simulate
set.seed(1234)
sim.data <- list()
for (i in 1:5) {
X <- as.data.frame(rmvnorm(60, mean=rep(0,6), sigma=corrmat))
names(X) <- c('ZEduc', 'ZIncom45', 'Age', 'ZAlcTox', 'ZCESDFU', 'ZAUDIT')
X$PID <- 1:60
X$Gender <- as.factor(rbinom(60, 1, prob=0.5))
X <- X[rep(row.names(X), 45),] #Repeat each row 45 times, all current variables are time invariant (ZAlcTox, too??)
X <- X[order(X$PID),] #Order by PID
X$Day <- rep(0:44, 60) #Create a variable containing day variable 0-44
# Create Variables
X$DrinkYN <- 1/(1+exp(-1*predict(fit1, newdata = X)))
X$DrinkYN <- as.factor(rbinom(2700, 1, prob = X$DrinkYN))
X$Q1 <- 1/(1+exp(-1*predict(fit2, newdata=X)))
X$Q1 <- as.factor(rbinom(2700, 1, prob = X$Q1))
X$Q2 <- 1/(1+exp(-1*predict(fit3, newdata = X)))
X$Q2 <- as.factor(rbinom(2700,1,prob=X$Q2))
X$Q3 <- 1/(1+exp(-1*predict(fit4, newdata = X)))
X$Q3 <- as.factor(rbinom(2700,1,prob=X$Q3))
X$Q4 <- 1/(1+exp(-1*predict(fit5, newdata = X)))
X$Q4 <- as.factor(rbinom(2700,1,prob=X$Q4))
X$Q5 <- 1/(1+exp(-1*predict(fit6, newdata = X)))
X$Q5 <- as.factor(rbinom(2700,1,prob=X$Q5))
X$Q6 <- 1/(1+exp(-1*predict(fit7, newdata = X)))
X$Q6 <- as.factor(rbinom(2700,1,prob=X$Q6))
X$Q7 <- rpois(2700, 2) # lambda = 2...mean of 2. why???
X[X$DrinkYN==0,c('Q7')] <- 0
# Make Missed Dose
# This is where issues come in!!!
# Closest I could get to these numbers was:
# MD <- glm(data=comp,MissedDose~ZEduc+ZIncom45+Age+ZAlcTox+ZCESDFU+ZAUDIT,family=binomial(link=logit))
# MD <- glm(data=comp,MissedDose~DrinkYN+ZAlcTox+Day,family=binomial(link=logit))
MD <- glmer(MissedDose ~ DrinkYN*Day + ZAlcTox + (1|PID), data = comp, family=binomial(link=logit))
# Use a predict function instead of coding in the values
int <- MD@beta[1]
b1 <- MD@beta[2] # DrinkYN1
b2 <- MD@beta[3] # Day
b3 <- MD@beta[4] # ZAlcTox
b4 <- MD@beta[5] # DrinkYN1:Day
sigmaPID <- MD@theta
X$groupErr <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$groupErr2 <- rnorm(60, mean=0, sd=sigmaPID)[X$PID]
X$MissedDose <- predict(MD,X,allow.new.levels=TRUE)
X$MissedDose <- 1/(1+exp(-X$MissedDose))
X$MissedDose <- rbinom(2700, 1, prob=X$MissedDose)
sim.data[[i]] <- X
}
#Remove unnecessary before analysis
rm(comp, sigma, X, b1, b2,b3,b4, fit1, fit2, fit3, fit4, fit5, fit6, fit7,
i, int, sigmaPID)
l1 <- sim.data[[1]]
rremove <- function(nrem, x) { # this literally just randomly removes nrem columns. Like, the entire column. Why???
id <- sample(length(x), nrem)
x[id] <- NA
x
}
grps <- list(X='Q1',A=c('Q2','Q3'),B=c('Q4','Q5'),C=c('Q6','Q7'))
split.form <- function(set,grps){
set$block[sample(1:nrow(set),nrow(set),FALSE)] <- c('A','B','C')
set[set$block == "A",grps$A] <- NA
set[set$block == "B",grps$B] <- NA
set[set$block == "C",grps$C] <- NA
set
}
wave.des <- function(set, nmiss, ...) { # nmiss is the number of days each person would miss? 11?? Like, miss a fourth of the days?
id <- replicate(60, sample(2:44, size=nmiss))
for (i in 1:60) {
set[set$PID==i & set$Day %in% id[,i], c('Q1','Q2','Q3','Q4','Q5','Q6','Q7')] <- NA
}
set
}
set.seed(917236)
split.pm <- lapply(sim.data,function(x){split.form(x,grps)})
wave.pm <- lapply(sim.data,function(x){wave.des(x,11)})
# Step 2 - Impute simulated datasets, for both methods
split.imp <- lapply(split.pm, function(x) {mice(x, m=5)})
split.data <- lapply(split.imp,function(x) {complete(x,1)})
wave.imp <- lapply(wave.pm, function(x) {mice(x, m=5)})
wave.data <- lapply(wave.imp,function(x) {complete(x,1)})
set.seed(12345)
splitmods <- list()
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
splitmods[i] <- data.frame(model$coefficients)
}
set.seed(12345)
wavemods <- list()
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
wavemods[i] <- data.frame(model$coefficients)
}
wavemods[1]
typeof(wavemods[1])
summary(model)
set.seed(12345)
#splitmods <- list()
splitmods <- NULL
for (i in 1:length(split.data)){
dat <- data.frame(split.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
# splitmods[i] <- data.frame(model$coefficients)
splitmods <- rbind(splitmods,model$coefficients)
}
splitmods
typeof(splitmods)
set.seed(12345)
#wavemods <- list()
wavemods <- NULL
for (i in 1:length(wave.data)){
dat <- data.frame(wave.data[i])
model <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
#wavemods[i] <- data.frame(model$coefficients)
wavemods <- rbind(wavemods,model$coefficients)
}
mean(splitmods)
colMeans(splitmods)
# Step 4 - Calculate mean parameter estimates for both methods
split.means <- colMeans(splitmods)
wave.means <- colMeans(wavemods)
wave.means
wavemods
splitmods
dat <- data.frame(wave.data[i])
dat
datw <- data.frame(wave.data[i])
dats <- data.frame(split.data[i])
datw=dats
datw <- data.frame(wave.data[i])
dats <- data.frame(split.data[i])
datw == dats
splitmods <- NULL
for (i in 1:length(split.data)){
dat.s <- data.frame(split.data[i])
model.s <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat.s, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
#splitmods[i] <- data.frame(model$coefficients)
splitmods <- rbind(splitmods,model.s$coefficients)
}
set.seed(12345)
#wavemods <- list()
wavemods <- NULL
for (i in 1:length(wave.data)){
dat.w <- data.frame(wave.data[i])
model.w <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat.w, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
#wavemods[i] <- data.frame(model$coefficients)
wavemods <- rbind(wavemods,model$coefficients)
}
wavemods
splitmods
set.seed(12345)
#wavemods <- list()
wavemods <- NULL
for (i in 1:length(wave.data)){
dat.w <- data.frame(wave.data[i])
model.w <- glm(MissedDose ~ DrinkYN*Day + ZAlcTox, data = dat.w, family=binomial(link=logit))
# No "+ (1|PID)" because the data doesn't have PID, it indexes the rows as 1,1.1,1.2,...,2,2.1,2.2,...Change this?
#wavemods[i] <- data.frame(model$coefficients)
wavemods <- rbind(wavemods,model.w$coefficients)
}
wavemods
splitmods
wave.data==split.data
typeof(wave.data)
typeof(split.data)
w<-data.frame(wave.data)
s<-data.frame(split.data)
w==s
dim(w)
dim(s)
dim(sim.data)
length(sim.data)
dim(sim.data[1])
length(sim.data[1])
length(sim.data[1][1])
dim(sim.data[1][1])
sim.data[1]
s
split.imp
split.data[1]
dim(split.data[1])
length(split.data[1])
typeof(split.data[1])
dim(s)
dim(w)
s
split.data <- lapply(split.imp,function(x) {complete(x,5)})
split.data
wave.data
wave.data <- lapply(wave.imp,function(x) {complete(x,5)})
wave.data
# Step 2 - Impute simulated datasets, for both methods
split.imp <- lapply(split.pm, function(x) {mice(x, m=1)})
split.imp
?complete
split.data <- lapply(split.imp,function(x) {complete(x,1)})
split.data
s<-data.frame(split.data)
dim(s)
s
split.data
length(split.imp)
length(split.data)
for (i in 1:length(split.data)){
split.data[i] <- split.data[i][-c("block")]
}
for (i in 1:length(split.data)){
split.data[i] <- split.data[i][-"block"]
}
for (i in 1:length(split.data)){
split.data[i] <- split.data[i][,!(names(split.data[i]) %in% c("block")]
}
for (i in 1:length(split.data)){
split.data[i] <- split.data[i][,!(names(split.data[i]) %in% c("block"))]
}
typeof(split.data[1])
for (i in 1:length(split.data)){
split.data[i] <- data.frame(split.data[i])
split.data[i] <- split.data[i][,!(names(split.data[i]) %in% c("block"))]
}
split.data[1]
split.data <- lapply(split.imp,function(x) {complete(x,1)})
split.data[1]
split.data
split.data[1]
s
s <- data.frame(split.data[1])
s
s[,!(names(s)%in%c("block"))]
split.data <- lapply(split.imp,function(x) {complete(x,1)})
for (i in 1:length(split.data)){
s <- data.frame(split.data[i])
split.data[i] <- s[,!(names(s)%in%c("block"))]
}
split.data[1]
split.data <- lapply(split.imp,function(x) {complete(x,1)})
s
s[,!(names(s)%in%c("block"))]
split.comp <- lapply(split.imp,function(x) {complete(x,1)})
split.data <- NULL
for (i in 1:length(split.comp)){
s <- data.frame(split.comp[i])
split.data[i] <- s[,!(names(s)%in%c("block"))]
}
split.data[1]
split.comp
s <- data.frame(split.comp[i])
s
split.data[1] <- s[,!(names(s)%in%c("block"))]
split.data[1]
split.data <- lapply(split.imp,function(x) {complete(x,1)})
split.data
split.data <- lapply(split.imp,function(x) {complete(x,5)})
split.data <- lapply(split.imp,function(x) {complete(x,1)})
split.data
